[
  {
    "objectID": "Homework2_BaseR_Programming.html",
    "href": "Homework2_BaseR_Programming.html",
    "title": "Homework2 BaseR programming",
    "section": "",
    "text": "Suppose we have data from a medical experiment on blood pressure. We have the following pre-treatment values for subjects 1 through 20:\n\n130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135\n\nafter treatment, the subjects were measured again (subjects 1 through 20 match)\n\n114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113\n\n\nCreate two vectors. One vector corresponding to the pre measurements and one to the post measurements.\n\n\nThis code chunk will take the given measurements and will combine them into an appropriate vector using “c()”.\n\n\n# Create first vector corresponding to first measurement\nmeasurement1 &lt;- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)\n\n# Create second vector corresponding to second measurement\nmeasurement2 &lt;- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)\n\n# check\nprint(measurement1)\n\n [1] 130 128 116 124 133 134 118 126 114 127 141 138 128 140 137 131 120 128 139\n[20] 135\n\nprint(measurement2)\n\n [1] 114  98 113  99 107 116 113 111 119 117 101 119 130 122 106 106 124 102 117\n[20] 113\n\n\n\nAssign names to the vector elements using the paste() function. Note that names() can be overwritten by a character vector. To quickly create the names, try running the code\n\n\npaste(\"Subject\", 1:20, sep = \"_\")\n\n [1] \"Subject_1\"  \"Subject_2\"  \"Subject_3\"  \"Subject_4\"  \"Subject_5\" \n [6] \"Subject_6\"  \"Subject_7\"  \"Subject_8\"  \"Subject_9\"  \"Subject_10\"\n[11] \"Subject_11\" \"Subject_12\" \"Subject_13\" \"Subject_14\" \"Subject_15\"\n[16] \"Subject_16\" \"Subject_17\" \"Subject_18\" \"Subject_19\" \"Subject_20\"\n\n\n  Create the same names for each vector’s elements.\n\nThis code chunk will use the R paste() function to assign names to the the previously created vectors.\n\n\n#assign names to first measurement\nnames(measurement1) &lt;- paste(\"Subject\", 1:20, sep = \"_\")\n#check\nprint(measurement1)\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n       130        128        116        124        133        134        118 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n       126        114        127        141        138        128        140 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n       137        131        120        128        139        135 \n\ncat(\"\\n\")\n#assign names to second measurement\nnames(measurement2) &lt;- paste(\"Subject\", 1:20, sep = \"_\")\n#check\nprint(measurement2)\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n       114         98        113         99        107        116        113 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n       111        119        117        101        119        130        122 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n       106        106        124        102        117        113 \n\n\n\nCalculate the change in blood pressure for each patient by subtracting post-treatment measurements from pre-treatment measurements. Recall the R does math elementwise! Save this calculation as a new object in R (also a vector).\n\n\nThis chunk finds the difference between the Pre_bp and Post_bp, then stores it in a new vector.\n\n\n#create a new object \"results\" bu subtracting second measurement from first\nresults &lt;- measurement1 - measurement2\n#check\nresults\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n        16         30          3         25         26         18          5 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n        15         -5         10         40         19         -2         18 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n        31         25         -4         26         22         22 \n\n\n\nCalculate the average decrease in blood pressure across all patients.\n\n\nThis chunk finds the average decrease in bp by using the R mean() function. \n\n\n#Find the average decrease across all patients\naverage_decrease &lt;- mean(results)\n#check\nprint(average_decrease)\n\n[1] 17\n\n\n5 Determine which patients experienced a decrease in blood pressure after treatment (a positive change). Using which() function to just return the indices (and names) associated with this type of change.\n\nThis chunk uses the R which() function to find Subjects that have observations greater than zero, signifying that they saw a positive change in blood pressure.\n\n\n#Return subjects that had a positive reaction to the treatment\npos_reactions&lt;-which(results&gt;0)\npos_reactions\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n         1          2          3          4          5          6          7 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n         8         10         11         12         14         15         16 \nSubject_18 Subject_19 Subject_20 \n        18         19         20 \n\n\n\nSubset the vector of differences to only return those that have a positive change.\n\n\nThis chunk subsets the results to only include those that had positive reactions to the treatment and stores them in a new vector.\n\n\n#new results store only subjects that have a positive reactions to treatments\nnew_results &lt;- results[pos_reactions]\n#check\nnew_results\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n        16         30          3         25         26         18          5 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n        15         10         40         19         18         31         25 \nSubject_18 Subject_19 Subject_20 \n        26         22         22 \n\n\n\nCalculate the average decrease in blood pressure for those where the blood pressure decreased (positive change).\n\n\nThis chunk finds the average change of the new results vector using the R mean() function.\n\n\n#Store new average\naverage_decrease_pos_reaction &lt;- mean(new_results)\n#check\naverage_decrease_pos_reaction\n\n[1] 20.64706"
  },
  {
    "objectID": "Homework2_BaseR_Programming.html#task-1-basic-vector-practice",
    "href": "Homework2_BaseR_Programming.html#task-1-basic-vector-practice",
    "title": "Homework2 BaseR programming",
    "section": "",
    "text": "Suppose we have data from a medical experiment on blood pressure. We have the following pre-treatment values for subjects 1 through 20:\n\n130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135\n\nafter treatment, the subjects were measured again (subjects 1 through 20 match)\n\n114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113\n\n\nCreate two vectors. One vector corresponding to the pre measurements and one to the post measurements.\n\n\nThis code chunk will take the given measurements and will combine them into an appropriate vector using “c()”.\n\n\n# Create first vector corresponding to first measurement\nmeasurement1 &lt;- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)\n\n# Create second vector corresponding to second measurement\nmeasurement2 &lt;- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)\n\n# check\nprint(measurement1)\n\n [1] 130 128 116 124 133 134 118 126 114 127 141 138 128 140 137 131 120 128 139\n[20] 135\n\nprint(measurement2)\n\n [1] 114  98 113  99 107 116 113 111 119 117 101 119 130 122 106 106 124 102 117\n[20] 113\n\n\n\nAssign names to the vector elements using the paste() function. Note that names() can be overwritten by a character vector. To quickly create the names, try running the code\n\n\npaste(\"Subject\", 1:20, sep = \"_\")\n\n [1] \"Subject_1\"  \"Subject_2\"  \"Subject_3\"  \"Subject_4\"  \"Subject_5\" \n [6] \"Subject_6\"  \"Subject_7\"  \"Subject_8\"  \"Subject_9\"  \"Subject_10\"\n[11] \"Subject_11\" \"Subject_12\" \"Subject_13\" \"Subject_14\" \"Subject_15\"\n[16] \"Subject_16\" \"Subject_17\" \"Subject_18\" \"Subject_19\" \"Subject_20\"\n\n\n  Create the same names for each vector’s elements.\n\nThis code chunk will use the R paste() function to assign names to the the previously created vectors.\n\n\n#assign names to first measurement\nnames(measurement1) &lt;- paste(\"Subject\", 1:20, sep = \"_\")\n#check\nprint(measurement1)\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n       130        128        116        124        133        134        118 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n       126        114        127        141        138        128        140 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n       137        131        120        128        139        135 \n\ncat(\"\\n\")\n#assign names to second measurement\nnames(measurement2) &lt;- paste(\"Subject\", 1:20, sep = \"_\")\n#check\nprint(measurement2)\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n       114         98        113         99        107        116        113 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n       111        119        117        101        119        130        122 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n       106        106        124        102        117        113 \n\n\n\nCalculate the change in blood pressure for each patient by subtracting post-treatment measurements from pre-treatment measurements. Recall the R does math elementwise! Save this calculation as a new object in R (also a vector).\n\n\nThis chunk finds the difference between the Pre_bp and Post_bp, then stores it in a new vector.\n\n\n#create a new object \"results\" bu subtracting second measurement from first\nresults &lt;- measurement1 - measurement2\n#check\nresults\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n        16         30          3         25         26         18          5 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n        15         -5         10         40         19         -2         18 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n        31         25         -4         26         22         22 \n\n\n\nCalculate the average decrease in blood pressure across all patients.\n\n\nThis chunk finds the average decrease in bp by using the R mean() function. \n\n\n#Find the average decrease across all patients\naverage_decrease &lt;- mean(results)\n#check\nprint(average_decrease)\n\n[1] 17\n\n\n5 Determine which patients experienced a decrease in blood pressure after treatment (a positive change). Using which() function to just return the indices (and names) associated with this type of change.\n\nThis chunk uses the R which() function to find Subjects that have observations greater than zero, signifying that they saw a positive change in blood pressure.\n\n\n#Return subjects that had a positive reaction to the treatment\npos_reactions&lt;-which(results&gt;0)\npos_reactions\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n         1          2          3          4          5          6          7 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n         8         10         11         12         14         15         16 \nSubject_18 Subject_19 Subject_20 \n        18         19         20 \n\n\n\nSubset the vector of differences to only return those that have a positive change.\n\n\nThis chunk subsets the results to only include those that had positive reactions to the treatment and stores them in a new vector.\n\n\n#new results store only subjects that have a positive reactions to treatments\nnew_results &lt;- results[pos_reactions]\n#check\nnew_results\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n        16         30          3         25         26         18          5 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n        15         10         40         19         18         31         25 \nSubject_18 Subject_19 Subject_20 \n        26         22         22 \n\n\n\nCalculate the average decrease in blood pressure for those where the blood pressure decreased (positive change).\n\n\nThis chunk finds the average change of the new results vector using the R mean() function.\n\n\n#Store new average\naverage_decrease_pos_reaction &lt;- mean(new_results)\n#check\naverage_decrease_pos_reaction\n\n[1] 20.64706"
  },
  {
    "objectID": "Homework2_BaseR_Programming.html#task-2-basic-data-frame-practice",
    "href": "Homework2_BaseR_Programming.html#task-2-basic-data-frame-practice",
    "title": "Homework2 BaseR programming",
    "section": "Task 2: Basic Data Frame practice",
    "text": "Task 2: Basic Data Frame practice\nContinue the previous example.\n\nCreate a data frame object with four columns corresponding to your data above: patient, pre_bp, post_bp and diff_bp.\n\n\nThis chunk creates data frame with 20 rows, and 4 variables. The 4 variables are the 4 vectors that were created earlier.\n\n\n#Create a data frame from previous vectors\ndf &lt;- data.frame(row.names = 1:20,\n                 patient = names(measurement1),\n                 pre_bp = measurement1,\n                 post_bp = measurement2,\n                 diff_bp = results)\n#Check\nprint(df)\n\n      patient pre_bp post_bp diff_bp\n1   Subject_1    130     114      16\n2   Subject_2    128      98      30\n3   Subject_3    116     113       3\n4   Subject_4    124      99      25\n5   Subject_5    133     107      26\n6   Subject_6    134     116      18\n7   Subject_7    118     113       5\n8   Subject_8    126     111      15\n9   Subject_9    114     119      -5\n10 Subject_10    127     117      10\n11 Subject_11    141     101      40\n12 Subject_12    138     119      19\n13 Subject_13    128     130      -2\n14 Subject_14    140     122      18\n15 Subject_15    137     106      31\n16 Subject_16    131     106      25\n17 Subject_17    120     124      -4\n18 Subject_18    128     102      26\n19 Subject_19    139     117      22\n20 Subject_20    135     113      22\n\n\n\nReturn only rows where the diff_bp column is negative. (Use[ or learn about the subset() function if you’d like. If you use [, don’t reference the original vector from the first part, access the column of the data frame when looking at making a comparison.)\n\n\nThis chunk finds observations in the diff_bp variable that are less than 0, then prints out the data frame with out the rows that that contain the aforementioned observations.\n\n\n#Find which rows of variable diff_bp in df are greater than 0\nprint(which(df$diff_bp&lt;0))\n\n[1]  9 13 17\n\n#print df with rows of variable diff_bp in df are greater than 0 removed\nprint(df[-c(9,13,17),])\n\n      patient pre_bp post_bp diff_bp\n1   Subject_1    130     114      16\n2   Subject_2    128      98      30\n3   Subject_3    116     113       3\n4   Subject_4    124      99      25\n5   Subject_5    133     107      26\n6   Subject_6    134     116      18\n7   Subject_7    118     113       5\n8   Subject_8    126     111      15\n10 Subject_10    127     117      10\n11 Subject_11    141     101      40\n12 Subject_12    138     119      19\n14 Subject_14    140     122      18\n15 Subject_15    137     106      31\n16 Subject_16    131     106      25\n18 Subject_18    128     102      26\n19 Subject_19    139     117      22\n20 Subject_20    135     113      22\n\n\n\nAdd a new column to the data frame corresponding to TRUE if the post_bp is less than 120. Recall you can use $ to access a column. If you reference a column that doesn’t exist, and save a vector (of appropriate length in it), that vector becomes a column of your data frame! Similar to the previous question, don’t reference the original vector from the first part, access the column of the data frame when looking at making a comparison.\n\n\nThis chunk adds a variable to the data frame that returns TRUE or FALSE based on whether the post_bp was less than 120 or not.\n\n\n#add Boolean column where post_bp less than 120 \ndf$low_bp &lt;- df$post_bp[]&lt;120\n#check df\nprint(df)\n\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    130     114      16   TRUE\n2   Subject_2    128      98      30   TRUE\n3   Subject_3    116     113       3   TRUE\n4   Subject_4    124      99      25   TRUE\n5   Subject_5    133     107      26   TRUE\n6   Subject_6    134     116      18   TRUE\n7   Subject_7    118     113       5   TRUE\n8   Subject_8    126     111      15   TRUE\n9   Subject_9    114     119      -5   TRUE\n10 Subject_10    127     117      10   TRUE\n11 Subject_11    141     101      40   TRUE\n12 Subject_12    138     119      19   TRUE\n13 Subject_13    128     130      -2  FALSE\n14 Subject_14    140     122      18  FALSE\n15 Subject_15    137     106      31   TRUE\n16 Subject_16    131     106      25   TRUE\n17 Subject_17    120     124      -4  FALSE\n18 Subject_18    128     102      26   TRUE\n19 Subject_19    139     117      22   TRUE\n20 Subject_20    135     113      22   TRUE\n\n\n\nFinally, print the data frame out nicely in your final document by modifying the code below appropriately.\n\n\nThis prints a formatted data frame.\n\n\nknitr::kable(df)\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nlow_bp\n\n\n\n\nSubject_1\n130\n114\n16\nTRUE\n\n\nSubject_2\n128\n98\n30\nTRUE\n\n\nSubject_3\n116\n113\n3\nTRUE\n\n\nSubject_4\n124\n99\n25\nTRUE\n\n\nSubject_5\n133\n107\n26\nTRUE\n\n\nSubject_6\n134\n116\n18\nTRUE\n\n\nSubject_7\n118\n113\n5\nTRUE\n\n\nSubject_8\n126\n111\n15\nTRUE\n\n\nSubject_9\n114\n119\n-5\nTRUE\n\n\nSubject_10\n127\n117\n10\nTRUE\n\n\nSubject_11\n141\n101\n40\nTRUE\n\n\nSubject_12\n138\n119\n19\nTRUE\n\n\nSubject_13\n128\n130\n-2\nFALSE\n\n\nSubject_14\n140\n122\n18\nFALSE\n\n\nSubject_15\n137\n106\n31\nTRUE\n\n\nSubject_16\n131\n106\n25\nTRUE\n\n\nSubject_17\n120\n124\n-4\nFALSE\n\n\nSubject_18\n128\n102\n26\nTRUE\n\n\nSubject_19\n139\n117\n22\nTRUE\n\n\nSubject_20\n135\n113\n22\nTRUE"
  },
  {
    "objectID": "Homework2_BaseR_Programming.html#task-3-list-practice",
    "href": "Homework2_BaseR_Programming.html#task-3-list-practice",
    "title": "Homework2 BaseR programming",
    "section": "Task 3: List practice",
    "text": "Task 3: List practice\nContinue the previous example. Suppose we now also have data from another experiment where the ‘treatment’ was actually a placebo.\nWe have the following pre-treatment values for subjects 1 through 10 (different set of subjects):\n\n138, 135, 147, 117, 152, 134, 114, 121, 131, 130\n\nafter treatment, the subjects were measured again(subjects 1 through 10 match)\n\n105, 136, 123, 130, 134, 143, 135, 139, 120, 124\n\n\nCreate a new data frame with this data in it that is similar to the data frame from task 2 (including the new column).\n\n\nThis chunk creates a new data frame with 10 rows and 4 variables. It then adds a variable of TRUE/FALSE.\n\n\n#Creates a new data frame from the information provided\nexp2_df &lt;- data.frame(row.names = 1:10,\n                      patient = paste(\"Subject\", 1:10, sep = \"_\"),\n                      pre_bp = c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130),\n                      post_bp = c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)\n                      )\n#add difference column\nexp2_df$diff_bp &lt;- exp2_df$post_bp - exp2_df$pre_bp\n#Add Boolean column\nexp2_df$low_bp&lt;-exp2_df$post_bp[]&lt;120\n#print new data frame\nexp2_df\n\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    138     105     -33   TRUE\n2   Subject_2    135     136       1  FALSE\n3   Subject_3    147     123     -24  FALSE\n4   Subject_4    117     130      13  FALSE\n5   Subject_5    152     134     -18  FALSE\n6   Subject_6    134     143       9  FALSE\n7   Subject_7    114     135      21  FALSE\n8   Subject_8    121     139      18  FALSE\n9   Subject_9    131     120     -11  FALSE\n10 Subject_10    130     124      -6  FALSE\n\n\n\nNow create and store a list with two elements:\n\n\n1st element names treatment and contains the first data frame you created +2nd element named placebo and contains the second data frame you created\nThis chunk creates a list using the two data frames that were previously created, and prints the list.\n\n\n#Create a list of the two data frames\nmy_list &lt;- list(treatement = df,placebo =exp2_df)\n#Check list\nprint(my_list)\n\n$treatement\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    130     114      16   TRUE\n2   Subject_2    128      98      30   TRUE\n3   Subject_3    116     113       3   TRUE\n4   Subject_4    124      99      25   TRUE\n5   Subject_5    133     107      26   TRUE\n6   Subject_6    134     116      18   TRUE\n7   Subject_7    118     113       5   TRUE\n8   Subject_8    126     111      15   TRUE\n9   Subject_9    114     119      -5   TRUE\n10 Subject_10    127     117      10   TRUE\n11 Subject_11    141     101      40   TRUE\n12 Subject_12    138     119      19   TRUE\n13 Subject_13    128     130      -2  FALSE\n14 Subject_14    140     122      18  FALSE\n15 Subject_15    137     106      31   TRUE\n16 Subject_16    131     106      25   TRUE\n17 Subject_17    120     124      -4  FALSE\n18 Subject_18    128     102      26   TRUE\n19 Subject_19    139     117      22   TRUE\n20 Subject_20    135     113      22   TRUE\n\n$placebo\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    138     105     -33   TRUE\n2   Subject_2    135     136       1  FALSE\n3   Subject_3    147     123     -24  FALSE\n4   Subject_4    117     130      13  FALSE\n5   Subject_5    152     134     -18  FALSE\n6   Subject_6    134     143       9  FALSE\n7   Subject_7    114     135      21  FALSE\n8   Subject_8    121     139      18  FALSE\n9   Subject_9    131     120     -11  FALSE\n10 Subject_10    130     124      -6  FALSE\n\n\n\nAccess the first list element using three different types of syntax.\n\n\nThis chunk uses three different ways to access the first element of the list. The first uses the list index, the second uses the name of the element, and the third uses “$”.\n\n\n#access first element of list using [1] \nprint(my_list[1])\n\n$treatement\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    130     114      16   TRUE\n2   Subject_2    128      98      30   TRUE\n3   Subject_3    116     113       3   TRUE\n4   Subject_4    124      99      25   TRUE\n5   Subject_5    133     107      26   TRUE\n6   Subject_6    134     116      18   TRUE\n7   Subject_7    118     113       5   TRUE\n8   Subject_8    126     111      15   TRUE\n9   Subject_9    114     119      -5   TRUE\n10 Subject_10    127     117      10   TRUE\n11 Subject_11    141     101      40   TRUE\n12 Subject_12    138     119      19   TRUE\n13 Subject_13    128     130      -2  FALSE\n14 Subject_14    140     122      18  FALSE\n15 Subject_15    137     106      31   TRUE\n16 Subject_16    131     106      25   TRUE\n17 Subject_17    120     124      -4  FALSE\n18 Subject_18    128     102      26   TRUE\n19 Subject_19    139     117      22   TRUE\n20 Subject_20    135     113      22   TRUE\n\n#access first element of list using [\"name\"] \nprint(my_list[\"treatement\"])\n\n$treatement\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    130     114      16   TRUE\n2   Subject_2    128      98      30   TRUE\n3   Subject_3    116     113       3   TRUE\n4   Subject_4    124      99      25   TRUE\n5   Subject_5    133     107      26   TRUE\n6   Subject_6    134     116      18   TRUE\n7   Subject_7    118     113       5   TRUE\n8   Subject_8    126     111      15   TRUE\n9   Subject_9    114     119      -5   TRUE\n10 Subject_10    127     117      10   TRUE\n11 Subject_11    141     101      40   TRUE\n12 Subject_12    138     119      19   TRUE\n13 Subject_13    128     130      -2  FALSE\n14 Subject_14    140     122      18  FALSE\n15 Subject_15    137     106      31   TRUE\n16 Subject_16    131     106      25   TRUE\n17 Subject_17    120     124      -4  FALSE\n18 Subject_18    128     102      26   TRUE\n19 Subject_19    139     117      22   TRUE\n20 Subject_20    135     113      22   TRUE\n\n#access first element of list using $\nprint(my_list$treatement)\n\n      patient pre_bp post_bp diff_bp low_bp\n1   Subject_1    130     114      16   TRUE\n2   Subject_2    128      98      30   TRUE\n3   Subject_3    116     113       3   TRUE\n4   Subject_4    124      99      25   TRUE\n5   Subject_5    133     107      26   TRUE\n6   Subject_6    134     116      18   TRUE\n7   Subject_7    118     113       5   TRUE\n8   Subject_8    126     111      15   TRUE\n9   Subject_9    114     119      -5   TRUE\n10 Subject_10    127     117      10   TRUE\n11 Subject_11    141     101      40   TRUE\n12 Subject_12    138     119      19   TRUE\n13 Subject_13    128     130      -2  FALSE\n14 Subject_14    140     122      18  FALSE\n15 Subject_15    137     106      31   TRUE\n16 Subject_16    131     106      25   TRUE\n17 Subject_17    120     124      -4  FALSE\n18 Subject_18    128     102      26   TRUE\n19 Subject_19    139     117      22   TRUE\n20 Subject_20    135     113      22   TRUE\n\n\n\nIn one line, access the placebo data frame, pre_bp.\n\n\nThis chunk uses both “$” and a column name to access the pre_bp variable.\n\n\n#use subsetting to access placebo pre_bp\nprint(my_list$placebo[\"pre_bp\"])\n\n   pre_bp\n1     138\n2     135\n3     147\n4     117\n5     152\n6     134\n7     114\n8     121\n9     131\n10    130"
  },
  {
    "objectID": "Homework2_BaseR_Programming.html#task-4-control-flow-practice",
    "href": "Homework2_BaseR_Programming.html#task-4-control-flow-practice",
    "title": "Homework2 BaseR programming",
    "section": "Task 4: Control Flow Practice",
    "text": "Task 4: Control Flow Practice\nContinue the previous example.\n\nSuppose we want to characterize the post-treatment (or placebo) blood pressure measurement as optimal (&lt;= 120), borderline (120 &lt; bp &lt; 130), and high (&gt;130). First, create a new column in each data frame from above called status. You can do this via\n\n\nyour_df$status &lt;- character(20) #or 10 depending on number of observations\n\nNote: You want to do this additional column to the data frames that are stored in your list (R doesn’t do referencing to the original object).\n\nThis chunk adds an empty variable named “status” to the treatment data frame within the list.\n\n\nmy_list$treatement$status &lt;- character(20) \n\n\nFor the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status column’s values.\n\n\nThis chunk combines a loop and an if/else if statement to populate the status variable. The loop will iterate 20 times (one for each row) while the if/else if statements will check the post_bp variable within the treatment data frame within the list and compare it to a value. based on the result of the comparison it will populate the status variable with “high”, “optimal”, “low”, or “error”.\n\n\n#create for loop with to run 20 times, evaluates i with conditions using if/else if and populates status\nfor (i in 1:20) {\n  if(my_list$treatement$post_bp[i]&gt;=130){\n    my_list$treatement$status[i] = \"high\"\n  } else if(my_list$treatement$post_bp[i]&lt;130 & my_list$treatement$post_bp[i]&gt;120){\n      my_list$treatement$status[i] = \"borderline\"\n      } else if(my_list$treatement$post_bp[i]&lt;=120){\n        my_list$treatement$status[i] = \"optimal\"\n      } else{\n          my_list$treatement$status[i] = \"error\"\n        }\n}\n#check\nprint(my_list$treatement[,c(\"post_bp\", \"status\")])\n\n   post_bp     status\n1      114    optimal\n2       98    optimal\n3      113    optimal\n4       99    optimal\n5      107    optimal\n6      116    optimal\n7      113    optimal\n8      111    optimal\n9      119    optimal\n10     117    optimal\n11     101    optimal\n12     119    optimal\n13     130       high\n14     122 borderline\n15     106    optimal\n16     106    optimal\n17     124 borderline\n18     102    optimal\n19     117    optimal\n20     113    optimal\n\n\n\nRepeat for the placebo data frame (within the list).\n\n\nThis chunk executes the same function as the previous chunk.\n\n\n#create for loop with to run 10 times, evaluates i with conditions using if/else if and populates status\nfor (i in 1:10) {\n  if(my_list$placebo$post_bp[i]&gt;=130){\n    my_list$placebo$status[i] = \"high\"\n  } else if(my_list$placebo$post_bp[i]&lt;130 & my_list$placebo$post_bp[i]&gt;120){\n      my_list$placebo$status[i] = \"borderline\"\n      } else if(my_list$placebo$post_bp[i]&lt;=120){\n        my_list$placebo$status[i] = \"optimal\"\n      } else{\n          my_list$placebo$status[i] = \"error\"\n        }\n}\n#check\nprint(my_list$placebo[,c(\"post_bp\", \"status\")])\n\n   post_bp     status\n1      105    optimal\n2      136       high\n3      123 borderline\n4      130       high\n5      134       high\n6      143       high\n7      135       high\n8      139       high\n9      120    optimal\n10     124 borderline"
  },
  {
    "objectID": "Homework2_BaseR_Programming.html#task-5-function-writing",
    "href": "Homework2_BaseR_Programming.html#task-5-function-writing",
    "title": "Homework2 BaseR programming",
    "section": "Task 5: Function Writing",
    "text": "Task 5: Function Writing\nContinue the previous example. Suppose you would eventually have many data sets in the form of the two above. You want to write a function to do some things for you quickly.\n\nWrite a function that\n\n\ntakes in a list with two data frames in it (a treatment and placebo data frame) as an argument. Give no default value.\ntakes in an R function (that would find a summary of a numeric column) with the default value being set to “mean”(notice this is a quoted sting).\nFinds the statistic of interest (as defined by the user input) for the pre, post, and diff columns of both data frames\nUse my_fun &lt;- get(stat) within the function to get the function from the quoted string.\nthese six values should then be returned as a named list with meaningful name - this is a somewhat challenging part.\nI’m going to let you consider what to do but you might create a vector of names that is created dynamically based on the statistic passed, create a vector with the actual statistic value, and assign names to you vector. then return that (an atomic vector with names can be returned instead of a list).\nFinally, apply your function to your list of data frames from previous. Use it without specifying your statistic, with specifying you statistic as “var”, “sd”, “min”, and “max”.\nYou can render the document to check things are looking good. Make sure that all code chunks show (and are evaluated). Use headings to separate the sections. Write text before each code chunk explaining what you are trying to do. Use markdown where appropriate (to create lists, bold things, etc.),\nThis chunk creates a function that has two arguments. The first is a list of 2 data frames, and the second is a string that has “mean” as the default. The function then changes the names of the data frames in the list to “treatment” and “placebo”. The function then creates the my_fun function using the R get() function. Next the function creates a numeric vector with 6 observations. Then it creates a character vector which will be used to populate the names of the stats vector. There are 2 nested loops with if/else if statements. The first nested loop is used the populate the stats vector. The outer loop is used to control which data frame (“treatment” or “placebo”) in the list the inner loop is accessing. The inner loop is used to control which variable (“pre_bp”, “post_bp”, or “diff_bp”) in the data frame is used. The if/else statement determines which method is used to populate the stats vector. The second loop operates the same way but populates the U_name vector using the R paste() function. Following the loops the function capitalized the U_names elements and assigns them as names to the stats vector. Finally the function returns the stats vector.\n\n\n#create function\ndisplay_stat &lt;- function(the_list, stat = \"mean\"){\n  #Name elements of list\n  names(the_list)&lt;- c(\"treatment\",\n                      \"placebo\")\n  #Create get function that the user will define when calling the function\n  my_fun &lt;- get(stat)\n  #Create stats vector\n  stats &lt;- c(1:6)\n  #Create U_name vector\n  U_name &lt;- c(\" \")\n  #for loop to control which data frame in the list is used\n  for (i in 1:2) {\n    #for loop to control which variable in the data frame is used \n    for (j in 2:4) {\n      #if/else statement to tell which method to use to populate stats vector\n      if(i ==1){\n        #fills stats vector elements from 1 to 3\n        #uses my_fun and summary to access list element 1 variables 2 through 4 and return the statistic of interest\n      stats[i*(j-1)]&lt;-my_fun(summary(the_list[[i]][,j]))\n      } else if(i==2){\n        stats[i+j]&lt;-my_fun(summary(the_list[[i]][,j]))\n        }\n    }\n  }\n  #for loop to control which variable in the data frame is used \n  for (i in 1:2) {\n    #for loop to control which variable in the data frame is used \n    for (j in 2:4) {\n      #if/else statement to tell which method to use to populate stats vector\n      if (i == 1){\n        #fills U_name using the paste function\n         U_name[j-1] &lt;- paste(names(the_list[1]),\n                         names(the_list$treatment[j]), \n                         stat,\n                         sep = \"_\")\n      } else {\n         U_name[i+j] &lt;- paste(names(the_list[2]),\n                         names(the_list$treatment[j]), \n                         stat,\n                         sep = \"_\") \n      }\n    }\n  }\n  #Capitalizes U_name elements and assigns them as names to elements of the stats vector\n  names(stats) &lt;- toupper(U_name)\n  #returns the stats vector\n  return(stats)\n}\n#Test the function\nprint(display_stat(my_list))\n\n TREATMENT_PRE_BP_MEAN TREATMENT_POST_BP_MEAN TREATMENT_DIFF_BP_MEAN \n             129.05833              112.80833               17.41667 \n   PLACEBO_PRE_BP_MEAN   PLACEBO_POST_BP_MEAN   PLACEBO_DIFF_BP_MEAN \n             131.81667              127.98333               -3.62500 \n\n\n\nThis chunk uses the custom function to find mean, variation, standard deviation, minimum, maximum of the elements of the my_list.\n\n\n#test function default\nprint(display_stat(my_list))\n\n TREATMENT_PRE_BP_MEAN TREATMENT_POST_BP_MEAN TREATMENT_DIFF_BP_MEAN \n             129.05833              112.80833               17.41667 \n   PLACEBO_PRE_BP_MEAN   PLACEBO_POST_BP_MEAN   PLACEBO_DIFF_BP_MEAN \n             131.81667              127.98333               -3.62500 \n\n#test function for variation\nprint(display_stat(my_list,\"var\"))\n\n TREATMENT_PRE_BP_VAR TREATMENT_POST_BP_VAR TREATMENT_DIFF_BP_VAR \n             84.72042             116.69042             230.06667 \n   PLACEBO_PRE_BP_VAR   PLACEBO_POST_BP_VAR   PLACEBO_DIFF_BP_VAR \n            165.63667             170.68667             374.89375 \n\n#test function for standard deviation\nprint(display_stat(my_list,\"sd\"))\n\n TREATMENT_PRE_BP_SD TREATMENT_POST_BP_SD TREATMENT_DIFF_BP_SD \n            9.204369            10.802334            15.167949 \n   PLACEBO_PRE_BP_SD   PLACEBO_POST_BP_SD   PLACEBO_DIFF_BP_SD \n           12.869991            13.064711            19.362173 \n\n##test function for minimum\nprint(display_stat(my_list,\"min\"))\n\n TREATMENT_PRE_BP_MIN TREATMENT_POST_BP_MIN TREATMENT_DIFF_BP_MIN \n                  114                    98                    -5 \n   PLACEBO_PRE_BP_MIN   PLACEBO_POST_BP_MIN   PLACEBO_DIFF_BP_MIN \n                  114                   105                   -33 \n\n#test function for maximum\nprint(display_stat(my_list,\"max\"))\n\n TREATMENT_PRE_BP_MAX TREATMENT_POST_BP_MAX TREATMENT_DIFF_BP_MAX \n                  141                   130                    40 \n   PLACEBO_PRE_BP_MAX   PLACEBO_POST_BP_MAX   PLACEBO_DIFF_BP_MAX \n                  152                   143                    21"
  }
]